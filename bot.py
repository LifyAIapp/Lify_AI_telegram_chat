import os
import json
import time
import requests
import asyncio
from threading import Thread
from telegram import Update
from telegram.ext import Application, MessageHandler, filters, ContextTypes

# Telegram user_id ‚Üí JWT token (–≤ –ø—Ä–æ–¥–µ –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
user_tokens = {}

API_BASE_URL = "https://api.totothemoon.site/api"
POLLING_INTERVAL = 5  # —Å–µ–∫—É–Ω–¥

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
    if user_id not in user_tokens:
        if text.lower().startswith("bearer "):
            token = text.split(" ", 1)[1]
            user_tokens[user_id] = token
            await update.message.reply_text("‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
        else:
            await update.message.reply_text("üîë –û—Ç–ø—Ä–∞–≤—å JWT —Ç–æ–∫–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n`Bearer <—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω>`")
        return

    # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ API
    jwt_token = user_tokens[user_id]
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {jwt_token}"
    }
    payload = {"Message": text}

    try:
        post_response = requests.post(f"{API_BASE_URL}/Chat", headers=headers, json=payload)
        if post_response.status_code != 200:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {post_response.text}")
            return

        chat_msg = post_response.json()
        message_id = chat_msg["id"]
        await update.message.reply_text("üïê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

        Thread(target=poll_for_response, args=(user_id, message_id, context, jwt_token)).start()

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –û–ø—Ä–æ—Å –¥–æ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
def poll_for_response(user_id, message_id, context, jwt_token):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {jwt_token}"
    }

    while True:
        try:
            resp = requests.get(f"{API_BASE_URL}/Chat/{message_id}", headers=headers)
            if resp.status_code != 200:
                send_message(context, user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {resp.text}")
                return

            data = resp.json()
            if data["type"] != 1:  # 1 = Processing
                break
            time.sleep(POLLING_INTERVAL)
        except Exception as e:
            send_message(context, user_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            return

    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    try:
        final_resp = requests.get(f"{API_BASE_URL}/Chat/Count/1/0", headers=headers)
        if final_resp.status_code != 200:
            send_message(context, user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {final_resp.text}")
            return

        latest = final_resp.json()[0]
        ai_type = latest["type"]
        msg_text = latest["message"]

        if ai_type == 2:  # ConfirmRequest
            try:
                parsed = json.loads(msg_text)
                formatted = format_confirm_request(parsed)
                send_message(context, user_id, f"ü§ñ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:\n\n{formatted}")
            except Exception:
                send_message(context, user_id, f"ü§ñ (ConfirmRequest, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON):\n{msg_text}")
        else:
            send_message(context, user_id, f"ü§ñ –û—Ç–≤–µ—Ç:\n{msg_text}")

    except Exception as e:
        send_message(context, user_id, f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ConfirmRequest
def format_confirm_request(data):
    name = data.get("Name", "???")
    attributes = data.get("Attributes", [])
    result = [f"**{name}**\n"]

    for attr in attributes:
        key = attr.get("Key", "")
        value = attr.get("Value", "")
        result.append(f"**{key}**: {value}")

    return "\n".join(result)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —á–∞—Ç Telegram
def send_message(context, user_id, text):
    loop = asyncio.get_event_loop()
    loop.create_task(context.bot.send_message(chat_id=user_id, text=text))

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
def main():
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ .env")
        return

    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()

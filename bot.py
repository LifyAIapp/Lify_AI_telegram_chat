import json
import os
import time
import requests
import asyncio
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)
from threading import Thread

# –•—Ä–∞–Ω–∏–ª–∏—â–µ user_id ‚Üí JWT —Ç–æ–∫–µ–Ω (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –ë–î)
user_tokens = {}

API_BASE_URL = "https://api.totothemoon.site/api"
POLLING_INTERVAL = 5  # —Å–µ–∫—É–Ω–¥

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî Telegram-—á–∞—Ç –¥–ª—è —Ç–≤–æ–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Lify AI.\n\n"
        "–ß—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–π telegram —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.\n\n"
        "üí° –ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π –∏ –≤—Å—Ç–∞–≤—å –µ–≥–æ ‚Äî –∏ —Å–º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.",
        parse_mode="Markdown"
    )

# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()

    # 1. –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ
    if user_id not in user_tokens:
        if len(text.split(".")) == 3:  # –ø—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ JWT
            user_tokens[user_id] = text
            await update.message.reply_text("‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
        else:
            await update.message.reply_text(
                "üîë –ü—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–π telegram —Ç–æ–∫–µ–Ω (JWT), –∫–æ—Ç–æ—Ä—ã–π —Ç—ã –ø–æ–ª—É—á–∏–ª –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.\n\n"
                "üí° –ü—Ä–æ—Å—Ç–æ –≤—Å—Ç–∞–≤—å –µ–≥–æ —Å—é–¥–∞ ‚Äî –±–µ–∑ —Å–ª–æ–≤–∞ `Bearer`."
            )
        return

    # 2. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ /Chat
    jwt_token = user_tokens[user_id]
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {jwt_token}"
    }
    payload = {"Message": text}

    try:
        post_response = requests.post(f"{API_BASE_URL}/Chat", headers=headers, json=payload)
        if post_response.status_code != 200:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {post_response.text}")
            return

        chat_msg = post_response.json()
        message_id = chat_msg["id"]

        await update.message.reply_text("üïê –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

        # 3. –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å
        Thread(target=poll_for_response, args=(user_id, message_id, context, jwt_token)).start()

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# –§–æ–Ω–æ–≤—ã–π –æ–ø—Ä–æ—Å –¥–æ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
def poll_for_response(user_id, message_id, context, jwt_token):
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {jwt_token}"
    }

    while True:
        try:
            resp = requests.get(f"{API_BASE_URL}/Chat/{message_id}", headers=headers)
            if resp.status_code != 200:
                send_message(context, user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {resp.text}")
                return

            data = resp.json()
            if data["type"] != 1:  # 1 = Processing
                break
            time.sleep(POLLING_INTERVAL)
        except Exception as e:
            send_message(context, user_id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            return

    # 4. –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –æ—Ç AI
    try:
        final_resp = requests.get(f"{API_BASE_URL}/Chat/Count/1/0", headers=headers)
        if final_resp.status_code != 200:
            send_message(context, user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {final_resp.text}")
            return

        latest = final_resp.json()[0]
        ai_type = latest["type"]
        msg_text = latest["message"]

        # 5. –û–±—Ä–∞–±–æ—Ç–∫–∞ ConfirmRequest
        if ai_type == 2:  # ConfirmRequest
            try:
                parsed = json.loads(msg_text)
                formatted = format_confirm_request(parsed)
                send_message(context, user_id, f"ü§ñ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:\n\n{formatted}")
            except Exception:
                send_message(context, user_id, f"ü§ñ (ConfirmRequest, –Ω–æ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON):\n{msg_text}")
        else:
            send_message(context, user_id, f"ü§ñ –û—Ç–≤–µ—Ç:\n{msg_text}")

    except Exception as e:
        send_message(context, user_id, f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: {str(e)}")

# –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä ConfirmRequest
def format_confirm_request(data):
    name = data.get("Name", "???")
    attributes = data.get("Attributes", [])
    result = [f"*{name}*"]

    for attr in attributes:
        key = attr.get("Key", "")
        value = attr.get("Value", "")
        result.append(f"*{key}*: {value}")

    return "\n".join(result)

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_message(context, user_id, text):
    loop = asyncio.get_event_loop()
    loop.create_task(context.bot.send_message(chat_id=user_id, text=text, parse_mode="Markdown"))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
    if not TELEGRAM_BOT_TOKEN:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ .env")
        return

    app = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()

if __name__ == "__main__":
    main()
